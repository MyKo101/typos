source("R/utils.R")
cat("\nutils functions loaded")
#Create the exported typos
.clear_exported()
cat("\nExported function file cleared")
cat("\nLoading in the current list of typos")
#Add in the current list of typos
.typo_doc(nameS,names)
.typo_doc(`nameS<-`,`names<-`,back.tick=T)
.typo_doc(typoef,typeof)
.typo_doc(geom_warp,geom_wrap,ggplot2)
.typo_doc(fitler,filter,dplyr)
.typo_doc(transmutate,mutate,dplyr)
.typo_doc(lenght,length)
}
MakeTypos()
.package_str <- "base"
.correct_str <- "names"
.incorrect_str <- "nameS"
requireNamespace("rlang",quietly=T)
(.package_str == "base")
.typo_doc <- function(.incorrect,.correct,.package=base,back.tick=F)
{
requireNamespace("rlang",quietly=T)
.incorrect_str <- rlang::as_name(rlang::enquo(.incorrect))
.correct_str <- rlang::as_name(rlang::enquo(.correct))
.package_str <- rlang::as_name(rlang::enquo(.package))
if(.package_str == "base")
.package_str <- "" else
.package_str <- paste0(",",.package_str)
.alias <- paste0("\\alias{",.incorrect_str,"}",sep="")
if(back.tick)
{
.incorrect_str <- paste0("`",.incorrect_str,"`")
.correct_str <- paste0("`",.correct_str,"`")
}
.typo_code <- paste0(
.incorrect_str,
" <- .typo(",
.correct_str,
.package_str,
")"
)
.item <- paste0("\\item \\code{",.typo_code,"}")
.export_Rd <- readLines("man/Exported-typos.Rd")
.alias.line <- grep("\\alias{",.export_Rd,fixed=T)
.export_Rd <- append(.export_Rd,
.alias,
after=tail(.alias.line,1))
.export_Rd <- append(.export_Rd,
.item,
after=length(.export_Rd)-3)
writeLines(.export_Rd,"man/Exported-typos.Rd")
.export_R <- readLines("R/Exported-typos.R")
.export_R <- append(.export_R,
c("#' @export",
.typo_code,
""))
writeLines(.export_R,"R/Exported-typos.R")
if(.package_str != "rlang" && .package_str != "")
usethis::use_package(.package_str,"Suggests")
return(c(.incorrect_str,.correct_str))
}
#Add in the current list of typos
.typo_doc(nameS,names)
MakeTypos <- function()
{
#Load utils
source("R/utils.R")
cat("\nutils functions loaded")
#Create the exported typos
.clear_exported()
cat("\nExported function file cleared")
cat("\nLoading in the current list of typos")
#Add in the current list of typos
.typo_doc(nameS,names)
.typo_doc(`nameS<-`,`names<-`,back.tick=T)
.typo_doc(typoef,typeof)
.typo_doc(geom_warp,geom_wrap,ggplot2)
.typo_doc(fitler,filter,dplyr)
.typo_doc(transmutate,mutate,dplyr)
.typo_doc(lenght,length)
}
MakeTypos
MakeTypos()
.clear_exported <- function()
{
.clear.file <- c("\\name{Exported-typos}",
"\\alias{Exported-typos}",
"\\title{List of currently exported typos}",
"\\description{",
"List of currently exported typos",
"}",
"\\details{",
"Exported typos:",
"\\itemize{",
"}",
"}",
"")
writeLines(.clear.file,"man/Exported-typos.Rd")
writeLines("","R/Exported-typos.R")
}
.typo_doc <- function(.incorrect,.correct,.package=base,back.tick=F)
{
requireNamespace("rlang",quietly=T)
.incorrect_str <- rlang::as_name(rlang::enquo(.incorrect))
.correct_str <- rlang::as_name(rlang::enquo(.correct))
.package_str <- rlang::as_name(rlang::enquo(.package))
.package_str_raw <- .package_str
if(.package_str == "base")
.package_str <- "" else
.package_str <- paste0(",",.package_str)
.alias <- paste0("\\alias{",.incorrect_str,"}",sep="")
if(back.tick)
{
.incorrect_str <- paste0("`",.incorrect_str,"`")
.correct_str <- paste0("`",.correct_str,"`")
}
.typo_code <- paste0(
.incorrect_str,
" <- .typo(",
.correct_str,
.package_str,
")"
)
.item <- paste0("\\item \\code{",.typo_code,"}")
.export_Rd <- readLines("man/Exported-typos.Rd")
.alias.line <- grep("\\alias{",.export_Rd,fixed=T)
.export_Rd <- append(.export_Rd,
.alias,
after=tail(.alias.line,1))
.export_Rd <- append(.export_Rd,
.item,
after=length(.export_Rd)-3)
writeLines(.export_Rd,"man/Exported-typos.Rd")
.export_R <- readLines("R/Exported-typos.R")
.export_R <- append(.export_R,
c("#' @export",
.typo_code,
""))
writeLines(.export_R,"R/Exported-typos.R")
if(!.package_str_raw %in% c("rlang","base"))
usethis::use_package(.package_str_raw,"Suggests")
return(c(.incorrect_str,.correct_str))
}
MakeTypos <- function()
{
#Load utils
source("R/utils.R")
cat("\nutils functions loaded")
#Create the exported typos
.clear_exported()
cat("\nExported function file cleared")
cat("\nLoading in the current list of typos")
#Add in the current list of typos
.typo_doc(nameS,names)
.typo_doc(`nameS<-`,`names<-`,back.tick=T)
.typo_doc(typoef,typeof)
.typo_doc(geom_warp,geom_wrap,ggplot2)
.typo_doc(fitler,filter,dplyr)
.typo_doc(transmutate,mutate,dplyr)
.typo_doc(lenght,length)
}
MakeTypos()
?use_package
update_my_package(run_check=T)
update_my_package(run_check=T)
update_my_package(run_check=T)
?tail
?length
use_package("usethis")
nameS
`nameS<-`
`names<-`
is.primitive("names<-")
is.primitive(`names<-``)
`
is.primitive(`names<-`)
is.primitive(`names<-`)
is.method
update_my_package()
update_my_package("Dropped Check")
update_my_package("Dropped Check")
usethis::use_package("palmerpenguins")
usethis::use_package("rlang")
usethis::use_tidy_eval()
devtools::document()
nameS
.typo <- function(.correct,.package=base,.typo_function=.typo_alert)
{
.pkg_str <- as_name(enquo(.package))
.correct_str <- as_name(enquo(.correct))
.alert_str <- as_name(enquo(.typo_function))
.pkg_func <- paste0(.pkg_str,"::",.correct_str)
.f <- paste0("function(...)\n",
"{\n",
"\trequireNamespace(\"",.pkg_str,"\",quietly=T)\n",
"\t.call <- match.call()\n",
"\t.call[[1]] <- quote(",.correct_str,")\n",
"\t",.alert_str,"(\"",.correct_str,"\",.call)\n",
"eval_tidy(.call,rlang::caller_env())\n",
"\t",.pkg_func,"(...)\n",
"}",collapse="")
return(eval(parse(text=.f)))
}
nameS <- .typo(names)
nameS
.typo <- function(.correct,.package=base,.typo_function=.typo_alert)
{
.pkg_str <- as_name(enquo(.package))
.correct_str <- as_name(enquo(.correct))
.alert_str <- as_name(enquo(.typo_function))
.pkg_func <- paste0(.pkg_str,"::",.correct_str)
.f <- paste0("function(...)\n",
"{\n",
"\trequireNamespace(\"",.pkg_str,"\",quietly=T)\n",
"\t.call <- match.call()\n",
"\t.call[[1]] <- quote(",.correct_str,")\n",
"\t",.alert_str,"(\"",.correct_str,"\",.call)\n",
"\teval_tidy(.call,rlang::caller_env())\n",
"}",collapse="")
return(eval(parse(text=.f)))
}
nameS <- .typo(names)
nameS
nameS(mtcars)
library(rlang)
.typo <- function(.correct,.package=base,.typo_function=.typo_alert)
{
.pkg_str <- as_name(enquo(.package))
.correct_str <- as_name(enquo(.correct))
.alert_str <- as_name(enquo(.typo_function))
.pkg_func <- paste0(.pkg_str,"::",.correct_str)
.f <- paste0("function(...)\n",
"{\n",
"\trequireNamespace(\"",.pkg_str,"\",quietly=T)\n",
"\t.call <- match.call()\n",
"\t.call[[1]] <- quote(",.correct_str,")\n",
"\t",.alert_str,"(\"",.correct_str,"\",.call)\n",
"\teval_tidy(.call,rlang::caller_env())\n",
"}",collapse="")
return(eval(parse(text=.f)))
}
nameS <- .typo(names)
nameS(mtcars)
.typo <- function(.correct,.package=base,.typo_function=.typo_alert)
{
.pkg_str <- as_name(enquo(.package))
.correct_str <- as_name(enquo(.correct))
.alert_str <- as_name(enquo(.typo_function))
.pkg_func <- paste0(.pkg_str,"::",.correct_str)
.f <- paste0("function(...)\n",
"{\n",
"\trequireNamespace(\"",.pkg_str,"\",quietly=T)\n",
"\t.call <- match.call()\n",
"\t.call[[1]] <- quote(",.correct_str,")\n",
"\t",.alert_str,"(\"",.correct_str,"\",.call)\n",
"\teval_tidy(.call,env=rlang::caller_env())\n",
"}",collapse="")
return(eval(parse(text=.f)))
}
nameS <- .typo(names)
nameS(mtcars)
nameS
.typo <- function(.correct,.package=base,.typo_function=.typo_alert)
{
.pkg_str <- as_name(enquo(.package))
.correct_str <- as_name(enquo(.correct))
.alert_str <- as_name(enquo(.typo_function))
.incorrect_str <- as_name(match.call()[[1]])
.pkg_func <- paste0(.pkg_str,"::",.correct_str)
.f <- paste0("function(...)\n",
"{\n",
"\trequireNamespace(\"",.pkg_str,"\",quietly=T)\n",
"\t.call <- match.call()\n",
"\t.call[[1]] <- quote(",.correct_str,")\n",
"\t",.alert_str,"(\"",.correct_str,"\"",.incorrect_str,"\")\n",
"\teval_tidy(.call,env=rlang::caller_env())\n",
"}",collapse="")
return(eval(parse(text=.f)))
}
nameS <- .typo(names)
.typo <- function(.correct,.package=base,.typo_function=.typo_alert)
{
.pkg_str <- as_name(enquo(.package))
.correct_str <- as_name(enquo(.correct))
.alert_str <- as_name(enquo(.typo_function))
.incorrect_str <- as_name(match.call()[[1]])
.pkg_func <- paste0(.pkg_str,"::",.correct_str)
.f <- paste0("function(...)\n",
"{\n",
"\trequireNamespace(\"",.pkg_str,"\",quietly=T)\n",
"\t.call <- match.call()\n",
"\t.call[[1]] <- quote(",.correct_str,")\n",
"\t",.alert_str,"(\"",.correct_str,"\",\"",.incorrect_str,"\")\n",
"\teval_tidy(.call,env=rlang::caller_env())\n",
"}",collapse="")
return(eval(parse(text=.f)))
}
nameS <- .typo(names)
nameS
.typo <- function(.correct,.package=base,.typo_function=.typo_alert)
{
.pkg_str <- as_name(enquo(.package))
.correct_str <- as_name(enquo(.correct))
.alert_str <- as_name(enquo(.typo_function))
.pkg_func <- paste0(.pkg_str,"::",.correct_str)
.f <- paste0("function(...)\n",
"{\n",
"\trequireNamespace(\"",.pkg_str,"\",quietly=T)\n",
"\t.call <- match.call()\n",
"\t.incorrect_call <- as_name(match.call())\n",
"\t.call[[1]] <- quote(",.correct_str,")\n",
"\t",.alert_str,"(\"",.correct_str,"\",\".incorrect_str\")\n",
"\teval_tidy(.call,env=rlang::caller_env())\n",
"}",collapse="")
return(eval(parse(text=.f)))
}
nameS <- .typo(names)
nameS(mtcars)
.typo <- function(.correct,.package=base,.typo_function=.typo_alert)
{
.pkg_str <- as_name(enquo(.package))
.correct_str <- as_name(enquo(.correct))
.alert_str <- as_name(enquo(.typo_function))
.pkg_func <- paste0(.pkg_str,"::",.correct_str)
.f <- paste0("function(...)\n",
"{\n",
"\trequireNamespace(\"",.pkg_str,"\",quietly=T)\n",
"\t.call <- match.call()\n",
"\t.incorrect_call <- as_name(.call[[1]])\n",
"\t.call[[1]] <- quote(",.correct_str,")\n",
"\t",.alert_str,"(\"",.correct_str,"\",\".incorrect_str\")\n",
"\teval_tidy(.call,env=rlang::caller_env())\n",
"}",collapse="")
return(eval(parse(text=.f)))
}
nameS(mtcars)
nameS <- .typo(names)
nameS(mtcars)
.typo <- function(.correct,.package=base,.typo_function=.typo_alert)
{
.pkg_str <- as_name(enquo(.package))
.correct_str <- as_name(enquo(.correct))
.alert_str <- as_name(enquo(.typo_function))
.pkg_func <- paste0(.pkg_str,"::",.correct_str)
.f <- paste0("function(...)\n",
"{\n",
"\trequireNamespace(\"",.pkg_str,"\",quietly=T)\n",
"\t.call <- match.call()\n",
"\t.incorrect_call <- as_name(.call[[1]])\n",
"\t.call[[1]] <- quote(",.correct_str,")\n",
"\t",.alert_str,"(\"",.correct_str,"\",.incorrect_str)\n",
"\teval_tidy(.call,env=rlang::caller_env())\n",
"}",collapse="")
return(eval(parse(text=.f)))
}
nameS <- .typo(names)
nameS(mtcars)
.typo <- function(.correct,.package=base,.typo_function=.typo_alert)
{
.pkg_str <- as_name(enquo(.package))
.correct_str <- as_name(enquo(.correct))
.alert_str <- as_name(enquo(.typo_function))
.pkg_func <- paste0(.pkg_str,"::",.correct_str)
.f <- paste0("function(...)\n",
"{\n",
"\trequireNamespace(\"",.pkg_str,"\",quietly=T)\n",
"\t.call <- match.call()\n",
"\t.incorrect_call <- as_name(.call[[1]])\n",
"\t.call[[1]] <- quote(",.correct_str,")\n",
"\t",.alert_str,"(\"",.correct_str,"\",.incorrect_call)\n",
"\teval_tidy(.call,env=rlang::caller_env())\n",
"}",collapse="")
return(eval(parse(text=.f)))
}
nameS <- .typo(names)
nameS(mtcars)
nameS(mtcars)
#' @name typo-functions
#'
#' @title
#' Defining typos
#'
#' @description
#' Function used to create a typo and alert the user
#'
#' @param .correct
#' The correctly spelled function for which the wrapper is being defined
#'
#' @param .package
#' The name of the package containing the correct function
#'
#' @param .typo_function
#' Function to be used as an alert
#'
#' @return
#' Wrapper function to call the correctly spelled function
#'
#' @details
#' The `.typo()` function is used to define a typo within the context
#' of the `typo` package. Without `typo`, mistakenly typed functions
#' will cause an Error and not be evaluated; however with `typo`,
#' the function *is* evaluated and a Warning is thrown.
#'
#' @examples
#' nameS <- .typo(names)
#'
#' @export
#'
.typo <- function(.correct,.package=base,.typo_function=.typo_alert)
{
.pkg_str <- as_name(enquo(.package))
.correct_str <- as_name(enquo(.correct))
.alert_str <- as_name(enquo(.typo_function))
.pkg_func <- paste0(.pkg_str,"::",.correct_str)
.f <- paste0("function(...)\n",
"{\n",
"\trequireNamespace(\"",.pkg_str,"\",quietly=T)\n",
"\t.call <- match.call()\n",
"\t.incorrect_call <- as_name(.call[[1]])\n",
"\t.call[[1]] <- quote(",.correct_str,")\n",
"\t",.alert_str,"(\"",.correct_str,"\",.incorrect_call)\n",
"\teval_tidy(.call,env=rlang::caller_env())\n",
"}",collapse="")
return(eval(parse(text=.f)))
}
#' @rdname typo-functions
#'
#' @param .call
#' The incorrectly spelled call made by the user
#'
#' @examples
#' .typo_alert("names","nameS(mtcars)")
#'
#' @export
#'
.typo_alert <- function(.correct,.call)
{
.warn <- paste0("Typo of \"",.correct,"()\" detected in \"",.call,"()\"")
warning(.warn,call.=F)
}
nameS <- .typo(names)
nameS(mtcars)
nameS
.typo <- function(.correct,.package=base,.typo_function=.typo_alert)
{
.pkg_str <- as_name(enquo(.package))
.correct_str <- as_name(enquo(.correct))
.alert_str <- as_name(enquo(.typo_function))
.pkg_func <- paste0(.pkg_str,"::",.correct_str)
.f <- paste0("function(...)\n",
"{\n",
"\trequireNamespace(\"",.pkg_str,"\",quietly=T)\n",
"\t.call <- match.call()\n",
"\t.incorrect_call <- as_name(.call[[1]])\n",
"\t.call[[1]] <- quote(",.correct_str,")\n",
"\t",.alert_str,"(\"",.correct_str,"\",.incorrect_call)\n",
"\teval_tidy(.call,env=rlang::caller_env())\n",
"}",collapse="")
res <- eval(parse(text=.f))
environment(res) <- rlang::caller_env()
return(eval(parse(text=.f)))
}
nameS <- .typo(names)
nameS
#' The `.typo()` function is used to define a typo within the context
#' of the `typo` package. Without `typo`, mistakenly typed functions
#' will cause an Error and not be evaluated; however with `typo`,
#' the function *is* evaluated and a Warning is thrown.
#'
#' @examples
#' nameS <- .typo(names)
#'
#' @export
#'
.typo <- function(.correct,.package=base,.typo_function=.typo_alert)
{
.pkg_str <- as_name(enquo(.package))
.correct_str <- as_name(enquo(.correct))
.alert_str <- as_name(enquo(.typo_function))
.pkg_func <- paste0(.pkg_str,"::",.correct_str)
.f <- paste0("function(...)\n",
"{\n",
"\trequireNamespace(\"",.pkg_str,"\",quietly=T)\n",
"\t.call <- match.call()\n",
"\t.incorrect_call <- as_name(.call[[1]])\n",
"\t.call[[1]] <- quote(",.correct_str,")\n",
"\t",.alert_str,"(\"",.correct_str,"\",.incorrect_call)\n",
"\teval_tidy(.call,env=rlang::caller_env())\n",
"}",collapse="")
res <- eval(parse(text=.f))
environment(res) <- rlang::caller_env()
return(res)
}
nameS <- .typo(names)
nameS
nameS(mtcars)
mutils::reinstall_my_package()
mutils::reinstall_my_package()
rm(list=ls(all.names=T))
mutils::reinstall_my_package()
update_my_package()
mutils::update_my_package()
update_my_package("Updated environments and eliminated iris")
mutils::update_my_package("Updated environments and eliminated iris")
mutils::update_my_package("Updated environments and eliminated iris",ignore_notes=T)
installed.packages()["mutils"]
installed.packages()["mutils","Version"]
mutils::update_my_package
mutils::Set_Version
installed.packages()["mutils","Version"]
