c("",
"#' @rdname Exported-typos",
"#' @export",
gsub("\\\\u0060","`",.typo_code,fixed=T)))
writeLines(.export_script,"R/Exported_typos.R")
}
}
.clear_exported <- function()
{
.clear.file <- c("\\name{Exported-typos}",
"\\alias{Exported-typos}",
"\\title{List of currently exported typos}",
"\\description{",
"List of currently exported typos",
"}",
"\\details{",
"Exported typos:",
"\\itemize{",
"}",
"}",
"")
writeLines(.clear.file,"man/Exported-typos.Rd")
}
.typo_doc <- function(.incorrect,.correct,.package=base,back.tick=F)
{
.incorrect_str <- as_name(enquo(.incorrect))
.correct_str <- as_name(enquo(.correct))
.package_str <- as_name(enquo(.package))
if(.package_str == "base")
.package_str <- "" else
.package_str <- paste0(",",.package_str)
.alias <- paste0("\\alias{",.incorrect_str,"}",sep="")
if(back.tick)
{
.incorrect_str <- paste0("`",.incorrect_str,"`")
.correct_str <- paste0("`",.correct_str,"`")
}
.typo_code <- paste0(
.incorrect_str,
" <- .typo(",
.correct_str,
.package_str,
")"
)
.item <- paste0("\\item \\code{",.typo_code,"}")
.export_script <- readLines("man/Exported-typos.Rd")
.alias.line <- grep("\\alias{",.export_script,fixed=T)
.export_script <- append(.export_script,
.alias,
after=tail(.alias.line,1))
.export_script <- append(.export_script,
.item,
after=length(.export_script)-3)
writeLines(.export_script,"man/Exported-typos.Rd")
}
.clear_exported()
.typo_doc(nameS,names)
.typo_doc(`nameS<-`,`names<-`,back.tick=T)
#.typo_doc(typoef,typeof)
#.typo_doc(geom_warp,geom_wrap,ggplot2)
devtools::document()
devtools::load_all()
?nameS
.typo_code
.clear_exported <- function()
{
.clear.file <- c("\\name{Exported-typos}",
"\\alias{Exported-typos}",
"\\title{List of currently exported typos}",
"\\description{",
"List of currently exported typos",
"}",
"\\details{",
"Exported typos:",
"\\itemize{",
"}",
"}",
"")
writeLines(.clear.file,"man/Exported-typos.Rd")
}
.typo_doc <- function(.incorrect,.correct,.package=base,back.tick=F)
{
.incorrect_str <- as_name(enquo(.incorrect))
.correct_str <- as_name(enquo(.correct))
.package_str <- as_name(enquo(.package))
if(.package_str == "base")
.package_str <- "" else
.package_str <- paste0(",",.package_str)
.alias <- paste0("\\alias{",.incorrect_str,"}",sep="")
if(back.tick)
{
.incorrect_str <- paste0("`",.incorrect_str,"`")
.correct_str <- paste0("`",.correct_str,"`")
}
.typo_code <- paste0(
.incorrect_str,
" <- .typo(",
.correct_str,
.package_str,
")"
)
.item <- paste0("\\item \\code{",.typo_code,"}")
.export_Rd <- readLines("man/Exported-typos.Rd")
.alias.line <- grep("\\alias{",.export_Rd,fixed=T)
.export_Rd <- append(.export_Rd,
.alias,
after=tail(.alias.line,1))
.export_Rd <- append(.export_Rd,
.item,
after=length(.export_Rd)-3)
writeLines(.export_Rd,"man/Exported-typos.Rd")
.export_R <- readLines("R/Exported-typos.R")
.export_R <- append(.export_R,
c("#' @export",
.typo_code))
writeLines(.export_R,"R/Exported-typos.R")
}
.clear_exported()
.typo_doc(nameS,names)
.typo_doc(`nameS<-`,`names<-`,back.tick=T)
#.typo_doc(typoef,typeof)
#.typo_doc(geom_warp,geom_wrap,ggplot2)
devtools::document()
devtools::load_all()
?nameS
.clear_exported <- function()
{
.clear.file <- c("\\name{Exported-typos}",
"\\alias{Exported-typos}",
"\\title{List of currently exported typos}",
"\\description{",
"List of currently exported typos",
"}",
"\\details{",
"Exported typos:",
"\\itemize{",
"}",
"}",
"")
writeLines(.clear.file,"man/Exported-typos.Rd")
}
.typo_doc <- function(.incorrect,.correct,.package=base,back.tick=F)
{
.incorrect_str <- as_name(enquo(.incorrect))
.correct_str <- as_name(enquo(.correct))
.package_str <- as_name(enquo(.package))
if(.package_str == "base")
.package_str <- "" else
.package_str <- paste0(",",.package_str)
.alias <- paste0("\\alias{",.incorrect_str,"}",sep="")
if(back.tick)
{
.incorrect_str <- paste0("`",.incorrect_str,"`")
.correct_str <- paste0("`",.correct_str,"`")
}
.typo_code <- paste0(
.incorrect_str,
" <- .typo(",
.correct_str,
.package_str,
")"
)
.item <- paste0("\\item \\code{",.typo_code,"}")
.export_Rd <- readLines("man/Exported-typos.Rd")
.alias.line <- grep("\\alias{",.export_Rd,fixed=T)
.export_Rd <- append(.export_Rd,
.alias,
after=tail(.alias.line,1))
.export_Rd <- append(.export_Rd,
.item,
after=length(.export_Rd)-3)
writeLines(.export_Rd,"man/Exported-typos.Rd")
.export_R <- readLines("R/Exported-typos.R")
.export_R <- append(.export_R,
c("#' @export",
.typo_code,
""))
writeLines(.export_R,"R/Exported-typos.R")
}
.clear_exported()
.typo_doc(nameS,names)
.typo_doc(`nameS<-`,`names<-`,back.tick=T)
#.typo_doc(typoef,typeof)
#.typo_doc(geom_warp,geom_wrap,ggplot2)
devtools::document()
devtools::load_all()
?nameS
writeLines("","R/Exported-typos.R")
.clear_exported <- function()
{
.clear.file <- c("\\name{Exported-typos}",
"\\alias{Exported-typos}",
"\\title{List of currently exported typos}",
"\\description{",
"List of currently exported typos",
"}",
"\\details{",
"Exported typos:",
"\\itemize{",
"}",
"}",
"")
writeLines(.clear.file,"man/Exported-typos.Rd")
writeLines("","R/Exported-typos.R")
}
.typo_doc <- function(.incorrect,.correct,.package=base,back.tick=F)
{
.incorrect_str <- as_name(enquo(.incorrect))
.correct_str <- as_name(enquo(.correct))
.package_str <- as_name(enquo(.package))
if(.package_str == "base")
.package_str <- "" else
.package_str <- paste0(",",.package_str)
.alias <- paste0("\\alias{",.incorrect_str,"}",sep="")
if(back.tick)
{
.incorrect_str <- paste0("`",.incorrect_str,"`")
.correct_str <- paste0("`",.correct_str,"`")
}
.typo_code <- paste0(
.incorrect_str,
" <- .typo(",
.correct_str,
.package_str,
")"
)
.item <- paste0("\\item \\code{",.typo_code,"}")
.export_Rd <- readLines("man/Exported-typos.Rd")
.alias.line <- grep("\\alias{",.export_Rd,fixed=T)
.export_Rd <- append(.export_Rd,
.alias,
after=tail(.alias.line,1))
.export_Rd <- append(.export_Rd,
.item,
after=length(.export_Rd)-3)
writeLines(.export_Rd,"man/Exported-typos.Rd")
.export_R <- readLines("R/Exported-typos.R")
.export_R <- append(.export_R,
c("#' @export",
.typo_code,
""))
writeLines(.export_R,"R/Exported-typos.R")
}
.clear_exported <- function()
{
.clear.file <- c("\\name{Exported-typos}",
"\\alias{Exported-typos}",
"\\title{List of currently exported typos}",
"\\description{",
"List of currently exported typos",
"}",
"\\details{",
"Exported typos:",
"\\itemize{",
"}",
"}",
"")
writeLines(.clear.file,"man/Exported-typos.Rd")
writeLines("","R/Exported-typos.R")
}
.typo_doc <- function(.incorrect,.correct,.package=base,back.tick=F)
{
.incorrect_str <- as_name(enquo(.incorrect))
.correct_str <- as_name(enquo(.correct))
.package_str <- as_name(enquo(.package))
if(.package_str == "base")
.package_str <- "" else
.package_str <- paste0(",",.package_str)
.alias <- paste0("\\alias{",.incorrect_str,"}",sep="")
if(back.tick)
{
.incorrect_str <- paste0("`",.incorrect_str,"`")
.correct_str <- paste0("`",.correct_str,"`")
}
.typo_code <- paste0(
.incorrect_str,
" <- .typo(",
.correct_str,
.package_str,
")"
)
.item <- paste0("\\item \\code{",.typo_code,"}")
.export_Rd <- readLines("man/Exported-typos.Rd")
.alias.line <- grep("\\alias{",.export_Rd,fixed=T)
.export_Rd <- append(.export_Rd,
.alias,
after=tail(.alias.line,1))
.export_Rd <- append(.export_Rd,
.item,
after=length(.export_Rd)-3)
writeLines(.export_Rd,"man/Exported-typos.Rd")
.export_R <- readLines("R/Exported-typos.R")
.export_R <- append(.export_R,
c("#' @export",
.typo_code,
""))
writeLines(.export_R,"R/Exported-typos.R")
}
.clear_exported()
.typo_doc(nameS,names)
.typo_doc(`nameS<-`,`names<-`,back.tick=T)
#.typo_doc(typoef,typeof)
#.typo_doc(geom_warp,geom_wrap,ggplot2)
devtools::document()
devtools::load_all()
?nameS
.clear_exported()
.typo_doc(nameS,names)
.typo_doc(`nameS<-`,`names<-`,back.tick=T)
.typo_doc(typoef,typeof)
.typo_doc(geom_warp,geom_wrap,ggplot2)
devtools::document()
devtools::load_all()
?nameS
?geom_wrap
?nameS
?geom_warp
typoef(2)
.typo_doc
?.typo_doc
nameS(iris)
help("Exported-typo")
help("Exported-typos")
?Exported-typos
?Exported-typos
?nameS
document()
?surv
??surv
?.typo
fitler <- .typo(filter,dplyr)
fitler
df
df <- tibble(x=sample(10,100,replace=T),y=rnorm)
df <- tibble(x=sample(10,100,replace=T),y=rnorm(100))
df
df %>% fitler(x == 1)
My_error <- function(a,b) warning("OH NO! A TYPO!")
nms <- .typo(names)
nms(iris)
My_error <- function(a,b) warning("OH NO! A TYPO!")
nms <- .typo(names,.typo_function = My_error)
nms(iris)
library(typos)
---
output: github_document
---
<!-- README.md is generated from README.Rmd. Please edit that file -->
```{r setup, include = FALSE}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
```
# typos <img src="logo.png" align="right" height=139 />
<!-- badges: start -->
<!-- badges: end -->
The goal of `typos` is to provide a flexible warning when commonly mis-typed functions are called. Functions with typing errors will still be evaluated and a warning will be output. It also provides the user with a convenient function to define their own typos.
## Installation
You can install the development version of `typos` from [GitHub](https://github.com/) with:
``` r
# install.packages("devtools")
devtools::install_github("MyKo101/typos")
```
## Example
For example, without `typos` installed, the following will throw an error due to the misspelling of `names` as `nameS`:
```{r error-example, error=T}
nameS(iris)
```
But, with `typos`, the function is still evaluated, and rather than an Error, a Warning is produced
```{r nameS-typo, include=F}
library(typos)
nameS(iris)
```
## Wrapping
All functions declared in `typos` are just wrapper functions around the "proper" function. These wrapper functions also output a warning to let users know that they have made a mistake. The warning includes the call to make it easier for users to fix.
## Generating typos
The key to `typos` is the `.typo()` function which generates the wrapper function. It also comes with a list of exported typos, which can be found [here]("man/Exported-typos.Rd"), by using the command `help("Exported-typos")` or applying the `?` operator to any other Exported typo (e.g. `?nameS`)
To generate your own typo function, just use the following syntax:
```
incorrect <- .typo(correct)
```
For example, the above used `nameS()` function is defined as:
```
nameS <- .typo(names)
```
For the `names()` function, we have a secondary assignment function (for when you want to change the names of an object), and so we need to define that separately (using back-ticks):
```
`nameS<-` <- .typo(`names<-`)
```
What if your function is in another package? Just use the `.package` argument to specify the package for the correct function
```
fitler <- .typo(filter,dplyr)
```
## Typo alert
Want to do something else with your typos? You can define your own function, as long as it takes two arguments: the correct function name and the call used by the user:
```{r own-func}
My_error <- function(a,b) warning("OH NO! A TYPO!")
nms <- .typo(names,.typo_function = My_error)
nms(iris)
```
?.typo
My_error <- function(a,b) warning("OH NO! A TYPO!")
nms <- .typo(names,.typo_function = My_error)
nms(iris)
knitr::knit("README.Rmd")
knitr::knit("README.Rmd")
.clear_exported()
.typo_doc(nameS,names)
.typo_doc(`nameS<-`,`names<-`,back.tick=T)
.typo_doc(typoef,typeof)
.typo_doc(geom_warp,geom_wrap,ggplot2)
.typo_doc(fitler,filter,dplyr)
devtools::document()
knitr::knit("README.Rmd")
devtools::load_all()
?nameS
help("Exported-typos")
?requireNamespace
#' @name typo-functions
#'
#' @title
#' Defining typos
#'
#' @description
#' Function used to create a typo and alert the user
#'
#' @param .correct
#' The correctly spelled function for which the wrapper is being defined
#'
#' @param .package
#' The name of the package containing the correct function
#'
#' @param .typo_function
#' Function to be used as an alert
#'
#' @return
#' Wrapper function to call the correctly spelled function
#'
#' @details
#' The `.typo()` function is used to define a typo within the context
#' of the `typo` package. Without `typo`, mistakenly typed functions
#' will cause an Error and not be evaluated; however with `typo`,
#' the function *is* evaluated and a Warning is thrown.
#'
#' @examples
#' nameS <- .typo(names)
#'
#' @export
#'
.typo <- function(.correct,.package=base,.typo_function=.typo_alert)
{
.pkg_str <- as_name(enquo(.package))
.correct_str <- as_name(enquo(.correct))
.alert_str <- as_name(enquo(.typo_function))
.pkg_func <- paste0(.pkg_str,"::",.correct_str)
.f <- paste0("function(...)\n",
"{\n",
"\trequireNamespace(",.pkg_str,"quietly=T)\n",
"\t.call <- deparse(sys.call())\n",
"\t",.alert_str,"(\"",.correct_str,"\",.call)\n",
"\t",.pkg_func,"(...)\n",
"}",collapse="")
return(eval(parse(text=.f)))
}
#' @rdname typo-functions
#'
#' @param .call
#' The incorrectly spelled call made by the user
#'
#' @examples
#' .typo_alert("names","nameS(iris)")
#'
#' @export
#'
.typo_alert <- function(.correct,.call)
{
.warn <- paste0("Typo of \"",.correct,"()\" detected in \"",.call,"\"")
warning(.warn,call.=F)
}
.clear_exported()
.typo_doc(nameS,names)
.typo_doc(`nameS<-`,`names<-`,back.tick=T)
.typo_doc(typoef,typeof)
.typo_doc(geom_warp,geom_wrap,ggplot2)
.typo_doc(fitler,filter,dplyr)
devtools::document()
knitr::knit("README.Rmd")
devtools::load_all()
help("Exported-typos")
nameS(iris)
df
fitler(df,x==1)
detach("package:dplyr")
fitler(df,x==1)
person("Michael A", "Barrowman", email="myko101ab@gmail.com",role=c("aut","cre"))
?typos
packages?typos
?requireNamespace
.clear_exported()
.typo_doc(nameS,names)
.typo_doc(`nameS<-`,`names<-`,back.tick=T)
.typo_doc(typoef,typeof)
.typo_doc(geom_warp,geom_wrap,ggplot2)
.typo_doc(fitler,filter,dplyr)
devtools::document()
knitr::knit("README.Rmd")
devtools::load_all()
help("Exported-typos")
?dplyr
